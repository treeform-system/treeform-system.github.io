<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Welcome to the documentation on TreeForm Systems</title>
    <link>http://localhost:1313/</link>
    <description>Recent content in Welcome to the documentation on TreeForm Systems</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 07 Oct 2024 19:28:51 -0400</lastBuildDate>
    <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>What is this?</title>
      <link>http://localhost:1313/internals/aboutinternals/</link>
      <pubDate>Mon, 07 Oct 2024 19:28:51 -0400</pubDate>
      <guid>http://localhost:1313/internals/aboutinternals/</guid>
      <description>The following pages are meant to be a general overview of the internals in RootDB.&#xA;RootDB is currently in development and therefore the documentation surrounding it is bound to change and evolve over time. So why am I writing all this? Having a proper documentation for the decisions made for all the structures under the hood is a good thing to have to look back on and think through the issues RootDB is aiming to solve, as well as being helpful for those curious what kind of stuff RootDB is capable of or those developing their own databases.</description>
    </item>
    <item>
      <title>Indexes</title>
      <link>http://localhost:1313/internals/indexes/</link>
      <pubDate>Mon, 07 Oct 2024 19:22:01 -0400</pubDate>
      <guid>http://localhost:1313/internals/indexes/</guid>
      <description>RootDB is currently in development and therefore this documentation may be a bit out of date for the actual algorithms and structures used, but for the most part will be up to date with the main branch of RootDB. What even are Indexes? There are many articles and videos about what indexes are, some good, some bad. So I will not go into the science or practicalities of what indexes do or benefits, but for the purposes of this page all you need to know is that an index is just a data structure that lets databases find where a specific row is being stored in the database.</description>
    </item>
    <item>
      <title>Wal</title>
      <link>http://localhost:1313/internals/wal/</link>
      <pubDate>Mon, 07 Oct 2024 19:19:32 -0400</pubDate>
      <guid>http://localhost:1313/internals/wal/</guid>
      <description>RootDB is currently in development and therefore this documentation may be a bit out of date for the actual algorithms and structures used, but for the most part will be up to date with the main branch of RootDB. What is a WAL? Databases must be durable and fast, and one way they maintain this is by having a WAL. A Write Ahead Log (WAL) is a file that all transactions modifying data write to, and once they commit the transaction, this change eventually gets merged with the data files.</description>
    </item>
    <item>
      <title>Bufferpool</title>
      <link>http://localhost:1313/internals/bufferpool/</link>
      <pubDate>Mon, 07 Oct 2024 19:19:25 -0400</pubDate>
      <guid>http://localhost:1313/internals/bufferpool/</guid>
      <description>RootDB is currently in development and therefore this documentation may be a bit out of date for the actual algorithms and structures used, but for the most part will be up to date with the main branch of RootDB. What is a bufferpool? A bufferpool is just another fancy data structure that lets you reuse blocks of memory. Why is this important? because reading from a file is expensive. It takes longer to read from your Hard Drive than it does to read from your RAM.</description>
    </item>
    <item>
      <title>Parser</title>
      <link>http://localhost:1313/internals/parser/</link>
      <pubDate>Mon, 07 Oct 2024 19:19:16 -0400</pubDate>
      <guid>http://localhost:1313/internals/parser/</guid>
      <description>RootDB is currently in development and therefore this documentation may be a bit out of date for the actual algorithms and structures used, but for the most part will be up to date with the main branch of RootDB. What is the Parser for? Every major relational database has their own variation of SQL, mine is no different. At the current moment it is compatible with MYSQL syntax for SQL and is trying to closely follow Ansi SQL syntax.</description>
    </item>
    <item>
      <title>Create</title>
      <link>http://localhost:1313/features/create/</link>
      <pubDate>Sat, 05 Oct 2024 11:43:27 -0400</pubDate>
      <guid>http://localhost:1313/features/create/</guid>
      <description> Syntax CREATE TABLE table_name (&#xA;column1 datatype constraint&amp;hellip;,&#xA;column2 datatype constraint,&#xA;column3 datatype constraint,&#xA;&amp;hellip;.);&#xA;Examples CREATE TABLE Users ( userID INT PRiMARY KEY, name CHAR(32) NOT NULL, email CHAR(32) NULL, age FLOAT, isMale BOOL ); currently supported datatypes are INT, FLOAT, BOOL, CHAR. Where size of CHAR column must be specified (ie. column CHAR(number) constraint&amp;hellip;) same constraints for table/column name apply as above total row size for all columns added together may not exceed 4070 bytes in total CHAR field will error when trying to insert strings larger than specified but will allow strings lower in size current constraints are nullable or not nullable and primary key may only have one primary key and must be integer field </description>
    </item>
    <item>
      <title>Getting Started</title>
      <link>http://localhost:1313/overview/getting-started/</link>
      <pubDate>Sat, 05 Oct 2024 11:43:12 -0400</pubDate>
      <guid>http://localhost:1313/overview/getting-started/</guid>
      <description>Install pacakge can be installed with go get (go 1.22 or higher recommended):&#xA;go get github.com/treeform-system/rootdb Features Currently the following features are supported&#xA;SELECT INSERT CREATE Examples A simple usage would be:&#xA;package main import ( &amp;#34;database/sql&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;log&amp;#34; _ &amp;#34;github.com/treeform-system/rootdb&amp;#34; ) func main() { fmt.Printf(&amp;#34;Drivers=%#v\n&amp;#34;, sql.Drivers()) db, err := sql.Open(&amp;#34;rootdb&amp;#34;, &amp;#34;example&amp;#34;) if err != nil { log.Fatal(err) } defer db.Close() err = db.Ping() if err != nil { log.</description>
    </item>
    <item>
      <title>Insert</title>
      <link>http://localhost:1313/features/insert/</link>
      <pubDate>Sat, 05 Oct 2024 11:43:06 -0400</pubDate>
      <guid>http://localhost:1313/features/insert/</guid>
      <description> Syntax INSERT INTO table_name (column1, column2, column3, &amp;hellip;)&#xA;VALUES (value1, value2, value3, &amp;hellip;);&#xA;Examples INSERT INTO Users (userID, name, email, age, isMale) VALUES (1, &amp;#39;Ricky Mendoza&amp;#39;, &amp;#39;testing@email.com&amp;#39;, 23, true); must specify columns currently values must be placed directly in sql string currently (will be changed to avoid sql injection in future) same constraints for table/column name applies here string literals use &amp;rsquo;, number literals can be integer or floats, true/false are reserved keywords for bool literals </description>
    </item>
    <item>
      <title>Select</title>
      <link>http://localhost:1313/features/select/</link>
      <pubDate>Sat, 05 Oct 2024 11:42:34 -0400</pubDate>
      <guid>http://localhost:1313/features/select/</guid>
      <description> Syntax SELECT column1, column2, &amp;hellip;.&#xA;FROM tableName&#xA;WHERE condition;&#xA;Examples SELECT * FROM Users; optionally instead of listing columns can use * to select all columns from table where condition accepts first parameter as column identifier and second parameter may be column identifer or string/number literal where field not necessary column and table name identifiers only accept strings that contain ASCII characters (a-zA-Z) as first character and (_a-zA-Z0-9) for second character (you can use the regex [_a-zA-Z][_a-zA-Z0-9]* to test if your string works), &amp;rsquo; is reserved for string literals, to specify and identifer literal use &amp;quot; and any sequence of characters within will be valid max length of 255 bytes for column/table name </description>
    </item>
  </channel>
</rss>
